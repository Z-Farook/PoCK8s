apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: kube-state-metrics
    app.kubernetes.io/version: 2.0.0
  name: kube-state-metrics
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kube-state-metrics
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kube-state-metrics
        app.kubernetes.io/version: 2.0.0
    spec:
      containers:
      - name: kube-state-metrics
        image: bitnami/kube-state-metrics # k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.0.0
        # args:
        #  - --resources=certificatesigningrequests
        #  - --resources=configmaps
        #  - --resources=cronjobs
        #  - --resources=daemonsets
        #  - --resources=deployments
        #  - --resources=endpoints
        #  - --resources=horizontalpodautoscalers
        #  - --resources=ingresses
        #  - --resources=jobs
        #  - --resources=limitranges
        #  - --resources=mutatingwebhookconfigurations
        #  - --resources=namespaces
        #  - --resources=networkpolicies
        #  - --resources=nodes
        #  - --resources=persistentvolumeclaims
        #  - --resources=persistentvolumes
        #  - --resources=poddisruptionbudgets
        #  - --resources=pods
        #  - --resources=replicasets
        #  - --resources=replicationcontrollers
        #  - --resources=resourcequotas
        #  - --resources=secrets
        #  - --resources=services
        #  - --resources=statefulsets
        #  - --resources=storageclasses
        #  - --resources=validatingwebhookconfigurations
        #  - --resources=volumeattachments
        #  - --telemetry-port=8081
        resources:
            requests:
              cpu: 500m
              memory: 500Mi
            limits:
              cpu: 1000m
              memory: 980Mi        
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
        ports:
        - containerPort: 8080
          name: http-metrics
        - containerPort: 8081
          name: telemetry
        readinessProbe:
          httpGet:
            path: /
            port: 8081
          initialDelaySeconds: 5
          timeoutSeconds: 5
        securityContext:
          runAsUser: 65534
# Note: here a dedicated node is chosen for the implementation. You can label your node like: Kubctl label node k3d-monitoring-0 nodeForMonitoring=true 
# If there is no node that matches the key value defined under nodeSelector, the pod will not run!          
      nodeSelector:
        nodeForMonitoring:  "true"
      serviceAccountName: kube-state-metrics